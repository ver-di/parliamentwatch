<?php
/**
 * @file
 */

include_once('pw_api.features.inc');

/**
 * Implements hook_menu().
 *
 * @return array
 */
function pw_api_menu() {
  $items = array();
  $items['admin/config/pw/pw_api/settings'] = array(
    'title' => 'PW API settings',
    'description' => 'Allows to add allowed IP addresses for the internal API.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pw_api_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pw_api.admin.inc',
    );

  // add parliaments hooks
  foreach (array('xml', 'json') as $file_type) {
    $key = 'api/parliaments.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_parliaments',
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.parliaments.inc',
      );
    $items[$key] = $item;
  }

  // add constituency hooks
  foreach (array('xml', 'json') as $file_type) {
    $key = 'api/parliament/%/constituencies.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_constituencies',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.constituencies.inc',
      );
    $items[$key] = $item;
  }

  // add votes hooks
  foreach (array('xml', 'json') as $file_type) {

    // add petitions
    $key = 'api/parliament/%/petitions.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_petitions',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.votes.inc',
      );
    $items[$key] = $item;

    // add polls
    $key = 'api/parliament/%/polls.'.$file_type;
    $item['page callback'] = 'pw_api_polls';
    $items[$key] = $item;
  }

  // add profile hooks
  foreach (array('xml', 'json') as $file_type) {
    $key = 'api/profile/%/profile.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_profile',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.profiles.inc',
      );
    $items[$key] = $item;

    // add another path for this call
    $key = 'api/parliament/%/profile/%/profile.'.$file_type;
    $item['page arguments'] = array(4, 2);
    $items[$key] = $item;
  }

  // add profiles hooks
  foreach (array('xml', 'json') as $file_type) {
    $key = 'api/parliament/%/profiles.'.$file_type;
    $item = array(
      'page callback' => 'pw_api_profiles',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'delivery callback' => 'pw_api_deliver_'.$file_type,
      'type' => MENU_CALLBACK,
      'file' => 'pw_api.profiles.inc',
      );
    $items[$key] = $item;
    $items['api/parliament/%/deputies.'.$file_type] = $items[$key];
    $items['api/parliament/%/candidates.'.$file_type] = $items[$key];
  }

  // add hooks for authorized api based on public api
  foreach ($items as $key => $item) {
    if(preg_match('/(api\/.*)(\.\w{3,4})$/', $key, $m)){
      $key_authorizied = $m[1].'-authorized'.$m[2];
      $items[$key_authorizied] = $item;
      $items[$key_authorizied]['access arguments'] = array('access authorized api');
      unset($items[$key_authorizied]['access callback']);
    }
  }

  return $items;
}

/**
 * Implements hook_menu().
 *
 * @return array
 */
function pw_api_permission() {
  return array(
    'access authorized api' => array(
      'title' => t('Access authorized API'),
      'description' => t('Read from hidden API to access private data.'),
      ),
    );
}


/**
 * Helper function used by hooks below for translating XML root elements.
 *
 * Translates the root elements of the following API parts:
 * areacodes.xml:               taxonomy_term_datas -> areacodes, taxonomy_term_data -> areacode
 * constituencies.xml:          taxonomy_term_datas -> constituencies, taxonomy_term_data -> constituency
 * dialogues.xml:               nodes -> dialogues, node -> dialogue
 * parliaments.xml:             taxonomy_term_datas -> parliaments, taxonomy_term_data -> parliament
 * profile.xml || profiles.xml: user_revisions -> profiles, user_revision -> profile
 *
 * This is hard-coded in here, because it is announced, that the root element
 * is changeable in the next version of the views export module. After the update,
 * this code will become obsolete.
 *
 * @param String $input
 * @return String
 */
function tag_replace($input) {
  // Get the current request path:
  $tmparr = explode("/", request_path());
  $count = count($tmparr);
  $requestname = "";
  if ($count != 0) {
    $requestname = str_replace(".xml", "", $tmparr[$count - 1]);
  }

  $replace_arr = array(); // IMPORTANT: The order within this array is crucial. Longer names have to be inserted _before_ shorter ones.
  switch ($requestname) {
    case "areacodes":
    $replace_arr = array("taxonomy_term_datas" => "areacodes", "taxonomy_term_data" => "areacode");
    break;
    case "constituencies":
    $replace_arr = array("taxonomy_term_datas" => "constituencies", "taxonomy_term_data" => "constituency");
    break;
    case "dialogues":
    $replace_arr = array("nodes" => "dialogues", "node" => "dialogue");
    break;
    case "parliaments":
    $replace_arr = array("taxonomy_term_datas" => "parliaments", "taxonomy_term_data" => "parliament");
    break;
    case "profile":
    case "profile-authorized":
    case "profiles":
    $replace_arr = array("user_revisions" => "profiles", "user_revision" => "profile");
    break;
    default:
      // do nothing
    break;
  }

//  $replace_arr = variable_get('pw_api_replacement', array());
  if (array_key_exists($input, $replace_arr)) {
    return $replace_arr[$input];
  }
  return $input;
}

function pw_api_preprocess_views_data_export_xml_header(&$vars) {
  $vars['root_node'] = tag_replace($vars['root_node']);
}

function pw_api_preprocess_views_data_export_xml_footer(&$vars) {
  $vars['root_node'] = tag_replace($vars['root_node']);
}

/**
 * Preprocess xml output template.
 */
function pw_api_preprocess_views_data_export_xml_body(&$vars) {
  _views_data_export_header_shared_preprocess($vars);
  _views_data_export_body_shared_preprocess($vars);

  // Compute the tag name based on the views base table, minus any trailing 's'.
  $vars['item_node'] = _views_data_export_xml_tag_clean(rtrim($vars['view']->base_table, 's'));
  $vars['item_node'] = tag_replace($vars['item_node']);

  foreach ($vars['themed_rows'] as $num => $row) {
    foreach ($row as $field => $content) {
      // Prevent double encoding of the ampersand. Look for the entities produced by check_plain().
      $content = preg_replace('/&(?!(amp|quot|#039|lt|gt);)/', '&amp;', $content);


      // insert CDATA into dialogue fields:
      if ($field == "body" || $field == "comment_body" || $field == "field_dialogue_annotation_1") {
        $content = '<![CDATA[' . str_replace(']]>', ']]]]><![CDATA[>', $content) . ']]>';
      }

      $vars['themed_rows'][$num][$field] = array(); // reset the array, otherwise strange things will happen
      if (substr_count($content, "||") > 0) { // Multiple-Feld
        $tmp_arr = explode("||", $content);
        if (substr_count($tmp_arr[0], "##") > 0) { // Multiple-Feld mit Attributen
          $collection_arr = array();
          foreach ($tmp_arr as $tmp) {
            $inner_tmp_arr = explode("##", $tmp);
            $collection_arr[] = array(
              "attribute_name" => $inner_tmp_arr[0],
              "attribute_value" => $inner_tmp_arr[1],
              "value" => $inner_tmp_arr[2]);
          }
          $vars['themed_rows'][$num][$field]["type"] = "multiplefield_with_attributes";
          $vars['themed_rows'][$num][$field]["content"] = $collection_arr;
        } else { // Multiple-Feld ohne Attribute
          $vars['themed_rows'][$num][$field]["type"] = "multiplefield_without_attributes";
          $vars['themed_rows'][$num][$field]["content"] = $tmp_arr;
        }
      } else if (substr_count($content, "##") > 0) { // Single field with attributes
        $inner_tmp_arr = explode("##", $content);
        $vars['themed_rows'][$num][$field]["type"] = "singlefield_with_attributes";
        $vars['themed_rows'][$num][$field]["content"] = array(
          "attribute_name" => $inner_tmp_arr[0],
          "attribute_value" => $inner_tmp_arr[1],
          "value" => $inner_tmp_arr[2]);
      } else if (substr_count($content, "}{") > 0) { // Single field with single subfields
        $tmp_arr = explode("}{", $content);
        $collection_arr = array();
        foreach ($tmp_arr as $tmp) {
          $inner_tmp_arr = explode("**", $tmp);
          $collection_arr[] = array(
            "name" => $inner_tmp_arr[0],
            "value" => $inner_tmp_arr[1]);
        }
        $vars['themed_rows'][$num][$field]["type"] = "singlefield_with_single_subfields";
        $vars['themed_rows'][$num][$field]["content"] = $collection_arr;
      } else {
        $vars['themed_rows'][$num][$field]["type"] = "singlefield_without_attributes";
        $vars['themed_rows'][$num][$field]["content"] = $content;
      }
      // Case 1: Multiple Field with additional attributes
      // example: a##b##c||d##e##f =>
      // <examples>
      //   <example a="b">c</bsp>
      //   <example d="e">f</bsp>
      // </examples>
      //
      // Case 2: Multiple field without additional attributes
      // example: a||b =>
      // <examples>
      //   <example>a</bsp>
      //   <example>b</bsp>
      // </examples>
      //
      // Case 3: Single field with single subfields
      // example: name1**val1}{name2**val2 =>
      // <example>
      //   <name1>val1</name1>
      //   <name2>val2</name1>
      // </example>
    }
  }

  foreach ($vars['header'] as $field => $header) {
    // If there is no field label, use 'no name'.
    $vars['xml_tag'][$field] = !empty($header) ? $header : 'no name';
    if ($vars['options']['transform']) {
      switch ($vars['options']['transform_type']) {
        case 'dash':
        $vars['xml_tag'][$field] = str_replace(' ', '-', $header);
        break;
        case 'underline':
        $vars['xml_tag'][$field] = str_replace(' ', '_', $header);
        break;
        case 'camel':
        $vars['xml_tag'][$field] = str_replace(' ', '', ucwords(strtolower($header)));
          // Convert the very first character of the string to lowercase.
        $vars['xml_tag'][$field][0] = strtolower($vars['xml_tag'][$field][0]);
        break;
        case 'pascal':
        $vars['xml_tag'][$field] = str_replace(' ', '', ucwords(strtolower($header)));
        break;
      }
    }
    // We should always try to output valid XML.
    $vars['xml_tag'][$field] = _views_data_export_xml_tag_clean($vars['xml_tag'][$field]);
    $vars['xml_tag'][$field] = tag_replace($vars['xml_tag'][$field]);
  }
}

function pw_api_views_pre_view(&$view, &$display_id, &$args) {
  if ($view->name == 'pw_api_internal_profile') {
    $allowed_ips = variable_get('pw_api_allowed_ips', array());
    $current_ip_is_allowed = false;
    $current_ip = $_SERVER['REMOTE_ADDR'];
    foreach ($allowed_ips as $allowed_ip) {
      if ($allowed_ip == $current_ip) {
        $current_ip_is_allowed = true;
        break;
      } else if (substr_count($allowed_ip, '.*') > 0) {
        $allowed_ip = str_replace('.*', '', $allowed_ip);
        if (strpos($current_ip, $allowed_ip) === 0) {
          $current_ip_is_allowed = true;
          break;
        }
      }
    }
    if (!$current_ip_is_allowed)
      $view->destroy();
  }
}

/**
 * Delivery callback; returns XML.
 *
 * @param array $items
 */
function pw_api_deliver_xml($page_result) {
  drupal_add_http_header('Content-type', 'text/xml; charset=utf8');

  if ($page_result === MENU_NOT_FOUND) {
    drupal_add_http_header('Status', '404 Not Found');
  }
  else {
    $pathinfo = pathinfo(current_path());
    $writer = new XmlWriter();
    $writer->openUri('php://output');
    $writer->setIndent(TRUE);
    $writer->setIndentString('  ');
    $writer->startDocument('1.0', 'UTF-8');
    pw_api_items_to_xml($writer, $page_result);
    $writer->flush();
    drupal_add_http_header('Cache-Control', 'public, max-age=86400');
  }
}


/**
 * converts an array to xml via an referenced XmlWriter object.
 *
 * @param XmlWriter &$writer
 *
 * @param array $items
 */
function pw_api_items_to_xml(&$writer, $items) {
  foreach($items as $key => $value) {

    // clear node name from iterators
    $key = preg_replace('/_\d+$/', '', $key);

    if(is_array($value)) {
      $writer->startElement($key);
      pw_api_items_to_xml($writer, $value);
      $writer->endElement();
    }
    else {
      $writer->writeElement($key, $value);
    }
  }
}


/**
 * Rebuilds all associative arrays with keys like constituency_12345 to flat arrays.
 *
 * @param array $items
 */

function pw_api_json_array_rebuild(&$items){
  foreach ($items as $key => &$value) {
    if(is_array($value)){
      if(preg_match('/_\d+$/', key($value))){
        $items[$key] = array_values($value);
      }
      pw_api_json_array_rebuild($value);
    }
  }
}

/**
 * Delivery callback; returns JSON.
 *
 * @param array $page_result
 */

function pw_api_deliver_json($page_result) {
  drupal_add_http_header('Content-Type', 'application/json');

  if ($page_result === MENU_NOT_FOUND) {
    drupal_add_http_header('Status', '404 Not Found');
  }
  else {
    drupal_add_http_header('Cache-Control', 'public, max-age=86400');
    pw_api_json_array_rebuild($page_result);
    print drupal_json_encode($page_result);
  }
}

/**
 * Delivery callback; returns CSV.
 *
 * @param array $page_result
 */
function pw_api_deliver_csv($page_result) {
  drupal_add_http_header('Content-type', 'text/csv; charset=utf8');

  if (is_int($page_result)) {
    switch ($page_result) {
      case MENU_NOT_FOUND:
      drupal_add_http_header('Status', '404 Not Found');
      break;
    }
  } else {
    $handle = fopen('php://output', 'w');
    foreach ($page_result as $item) {
      $fields = array(
        $item['uuid'],
        $item['gender'],
        $item['name'],
        $item['first_name'],
        $item['last_name'],
        $item['party'],
        $item['constituency']['uuid'],
        $item['constituency']['name'],
        $item['constituency']['number'],
        );
      fputcsv($handle, $fields);
    }
  }
}

/**
 * Page callback; returns selection of profiles based on given filters.
 *
 * Sets a custom cache ttl.
 *
 * @param string $parliament_filter
 *
 * @param string $parliament_argument
 *
 * @param string $filter
 *
 * @param string $argument
 *
 * @return array
 *   The profiles as an associative array
 */
function pw_api_profiles_old($parliament_filter, $parliament_argument, $filter = NULL, $argument = NULL) {
  $query = db_select('user_revision', 'ur');
  $users_alias = $query->join('users', 'u', '%alias.uid = ur.uid');
  //$roles_alias = $query->join('users_roles', 'uro', '%alias.uid = ur.uid');
  $users_cache_alias = $query->join('user_archive_cache', 'uac', '%alias.vid = ur.vid');
  $user_gender_alias = $query->leftJoin('field_revision_field_user_gender', 'frfug', "%alias.revision_id = ur.vid AND %alias.entity_type = 'user' AND %alias.language='und'"); // choose only one language, otherwise this user will be displayed more than once
  $user_fname_alias = $query->leftJoin('field_revision_field_user_fname', 'frfuf', "%alias.revision_id = ur.vid AND %alias.entity_type = 'user' AND %alias.language='und'"); // dito
  $user_lname_alias = $query->leftJoin('field_revision_field_user_lname', 'frful', "%alias.revision_id = ur.vid AND %alias.entity_type = 'user' AND %alias.language='und'"); // dito
  $user_party_alias = $query->leftJoin('field_revision_field_user_party', 'frfup', "%alias.revision_id = ur.vid AND %alias.entity_type = 'user' AND %alias.delta=0"); // we assume that a user is only in one party
  $user_constituency_alias = $query->leftJoin('field_revision_field_user_constituency', 'frfuc', "%alias.revision_id = ur.vid AND %alias.entity_type = 'user'"); // we assume that a user is in only one constituency
  // removed  AND %alias.delta=0 from field_revision_field_user_constituency query part
  $user_parliament_alias = $query->leftJoin('field_revision_field_user_parliament', 'frfupm', "%alias.revision_id = ur.vid AND %alias.entity_type = 'user' AND %alias.delta=0"); // we assume that a user is in only one parliament
  $term_party_alias = $query->join('taxonomy_term_data', 'p', "%alias.tid = $user_party_alias.field_user_party_tid");
  $term_constituency_alias = $query->leftJoin('taxonomy_term_data', 'c', "%alias.tid = $user_constituency_alias.field_user_constituency_tid");
  $term_parliament_alias = $query->join('taxonomy_term_data', 'pm', "%alias.tid = $user_parliament_alias.field_user_parliament_tid");
  $constituency_number_alias = $query->leftJoin('field_data_field_constituency_nr', 'fdfcn', "%alias.entity_id = $user_constituency_alias.field_user_constituency_tid AND %alias.entity_type = 'taxonomy_term'");
  $user_education_alias = $query->leftJoin('field_revision_field_user_education', 'frfue', "%alias.revision_id = ur.vid AND %alias.entity_type = 'user' AND %alias.language='und'");
  $user_address_alias = $query->leftJoin('field_revision_field_user_address', 'frfua', "%alias.revision_id = ur.vid AND %alias.entity_type = 'user' AND %alias.language='und'");
  $user_picture_alias = $query->leftJoin('field_revision_field_user_picture', 'frfupic', "%alias.revision_id = ur.vid AND %alias.entity_type = 'user' AND %alias.language='und'");
  $user_file_alias = $query->leftJoin('file_managed', 'frfufile', "%alias.fid = frfupic.field_user_picture_fid");
  $user_copyright_alias = $query->leftJoin('field_revision_field_image_copyright', 'frfucr', "%alias.revision_id = ur.vid AND %alias.entity_type = 'file' AND %alias.language='und'");
  $user_questions_get_alias = $query->leftJoin('field_revision_field_user_questions_get', 'frfuqg', "%alias.revision_id = ur.vid AND %alias.entity_type = 'user' AND %alias.language='und'");
  $user_answers_give_alias = $query->leftJoin('field_revision_field_user_answers_give', 'frfuag', "%alias.revision_id = ur.vid AND %alias.entity_type = 'user' AND %alias.language='und'");

  $query->addField('ur', 'name');
  $query->addField('ur', 'vid');
  $query->addField('ur', 'timestamp');
  $query->addField($users_alias, 'uuid');
  $query->addField($user_gender_alias, 'field_user_gender_value', 'gender');
  $query->addField($user_fname_alias, 'field_user_fname_value', 'first_name');
  $query->addField($user_lname_alias, 'field_user_lname_value', 'last_name');
  $query->addField($term_party_alias, 'name', 'party');
  $query->addField($term_parliament_alias, 'name', 'parliament_name');
  $query->addField($term_parliament_alias, 'uuid', 'parliament_uuid');
  $query->addField($term_constituency_alias, 'name', 'constituency_name');
  $query->addField($term_constituency_alias, 'uuid', 'constituency_uuid');
  $query->addField($constituency_number_alias, 'field_constituency_nr_value', 'constituency_number');
  $query->addField($user_education_alias, 'field_user_education_value', 'education');
  $query->addField($user_address_alias, 'field_user_address_country', 'location_country');
  $query->addField($user_address_alias, 'field_user_address_administrative_area', 'location_county');
  $query->addField($user_address_alias, 'field_user_address_locality', 'location_city');
  $query->addField($user_address_alias, 'field_user_address_postal_code', 'location_postal_code');
  $query->addField($user_file_alias, 'uri', 'picture_uri');
  $query->addField($user_copyright_alias, 'field_image_copyright_value', 'copyright');
  $query->addField($user_questions_get_alias, 'field_user_questions_get_value', 'questions_get');
  $query->addField($user_answers_give_alias, 'field_user_answers_give_value', 'answers_give');

  $feedname = current(explode(".", basename($_SERVER['REQUEST_URI'])));

  // add filter by role
  switch ($feedname) {
    case 'candidates':
    $user_roles = 'candidate';
    break;
    case 'deputies':
    $user_roles = 'deputy';
    break;
    default:
    $user_roles = array('candidate', 'deputy');
    break;
  }
  $query->where("$users_cache_alias.user_role IN (:user_roles)", array(':user_roles' => $user_roles));

  $query->orderBy("$users_alias.uuid", 'ASC');
  $query->orderBy('ur.vid', 'DESC');

  // add filter by parliament
  if ($parliament_filter == 'parliament') {
    $query->where("$term_parliament_alias.name = :p_name", array(':p_name' => $parliament_argument));
  }
  elseif ($parliament_filter == 'parliament-by-uuid') {
    $query->where("$term_parliament_alias.uuid = :p_uuid", array(':p_uuid' => $parliament_argument));
  }
  else {
    return MENU_NOT_FOUND;
  }

  switch ($filter) {
    case 'constituency':
    $query->where("$term_constituency_alias.name = :c_name", array(':c_name' => $argument));
    break;
    case 'constituency-by-uuid':
    $query->where("$term_constituency_alias.uuid = :c_uuid", array(':c_uuid' => $argument));
    break;
    case 'areacode':
    case 'areacode-by-uuid':
    $user_constituency_areacodes_alias = $query->join('field_revision_field_constituency_area_codes', 'frfcac', "%alias.revision_id = $user_constituency_alias.field_user_constituency_tid");
    $term_areacodes_alias = $query->join('taxonomy_term_data', 'pl', "%alias.tid = $user_constituency_areacodes_alias.field_constituency_area_codes_tid");
    if ($filter == "areacode-by-uuid") {
      $query->where("$term_areacodes_alias.uuid = :a_uuid", array(':a_uuid' => $argument));
    } else {
      $query->where("$term_areacodes_alias.name = :a_name", array(':a_name' => $argument));
    }
    break;
  }

  // add group by uid
  $query->groupBy('u.uid');

  $profiles = array(
    'root_node' => 'profiles',
    'list_node' => 'profile',
    'items' => array(),
    );

  foreach ($query->execute() as $row) {

    // set picture url
    $url_picture = !empty($row->picture_uri) ? file_create_url($row->picture_uri) : '';

    // set full county
    switch ($row->location_county) {
      case 'BW':
      $county = 'Baden-Wuerttemberg';
      break;
      case 'BY':
      $county = 'Bavaria';
      break;
      case 'BE':
      $county = 'Berlin';
      break;
      case 'BB':
      $county = 'Brandenburg';
      break;
      case 'HB':
      $county = 'Bremen';
      break;
      case 'HH':
      $county = 'Hamburg';
      break;
      case 'HE':
      $county = 'Hesse';
      break;
      case 'MV':
      $county = 'Mecklenburg-Vorpommern';
      break;
      case 'NI':
      $county = 'Lower Saxony';
      break;
      case 'NW':
      $county = 'North Rhine-Westphalia';
      break;
      case 'RP':
      $county = 'Rhineland-Palatinate';
      break;
      case 'SL':
      $county = 'Saarland';
      break;
      case 'SN':
      $county = 'Saxony';
      break;
      case 'ST':
      $county = 'Saxony-Anhalt';
      break;
      case 'SH':
      $county = 'Schleswig-Holstein';
      break;
      case 'TH':
      $county = 'Thuringia';
      break;
      default:
      $county = '';
    }

    // set url to profile # .'/archive/'.$row->vid
    $url_profile = url('profile/' . $row->name, array('absolute' => TRUE));

    $profiles['items'][] = array(
      'edited' => date('Y-m-d H:i', $row->timestamp),
      'name' => $row->name,
      'uuid' => $row->uuid,
      'gender' => $row->gender,
      'first_name' => $row->first_name,
      'last_name' => $row->last_name,
      'party' => $row->party,
      'education' => $row->education,
      'parliament' => array(
        'uuid' => $row->parliament_uuid,
        'name' => $row->parliament_name,
        ),
      'constituency' => array(
        'uuid' => $row->constituency_uuid,
        'name' => $row->constituency_name,
        'number' => $row->constituency_number,
        ),
      'location' => array(
        'country' => $row->location_country,
        'county' => t($county),
        'city' => $row->location_city,
        'postal_code' => $row->location_postal_code,
        ),
      'picture' => array(
        'url' => $url_picture,
        'copyright' => $row->copyright,
        ),
      'questions_get' => $row->questions_get,
      'answers_give' => $row->answers_give,
      'url' => $url_profile,
      );
}

drupal_add_http_header('Cache-Control', 'public, max-age=86400');

return $profiles;
}


function pw_api_views_query_alter(&$view, &$query) {
  if ($view->name == 'pw_api_internal_profile') {

    // add join user_archive_cache table to get rid of duplicates
    $join = new views_join();
    $join->table = 'user_archive_cache';
    $join->field = 'vid';
    $join->left_table = 'user_revision';
    $join->left_field = 'vid';
    $join->type = 'INNER';
    $query->add_relationship('user_archive_cache', $join, 'user_revision');
  }
}
