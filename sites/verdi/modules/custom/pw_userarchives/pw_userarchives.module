<?php

/**
 * @file
 * Includes main hooks.
 */

// -- hooks

function pw_userarchives_cron($uid = NULL) {

  $query = check_user_archives_database($uid);
  if(empty($query)){
    return;
  }

  // Delete the archive entries for the chosen users first
  $res = $query->execute();
  while ($row = $res->fetchAssoc()) {
    db_delete('user_archive_cache')
      ->condition('uid', $row['uid'])
      ->execute();
  }

  // Insert new archive entries:
  $dbconnection = db_insert('user_archive_cache');
  $dbconnection->from($query)->execute(); // INSERT INTO ... FROM SELECT ...

  // set actual / newest profile
  $result_uids = array_unique($query->execute()->fetchAllKeyed());
  foreach ($result_uids as $uid) {

    // restore to newest profile, especially after importing older profiles
    pw_reset_actuale_profile($uid);

    // update meta table
    db_query('UPDATE user_archive_cache uac
      INNER JOIN users u ON uac.vid = u.vid
      SET actual_profile = 1
      WHERE uac.uid = :uid', array(':uid' => $uid));
  }

  // Calculate number of questions and answers and insert them into:
  // (1) the revision table (for showing them in the profile view)
  // (2) the userarchive table (for showing them in the sidebar)

  $res1 = $query->execute();
  while ($row = $res1->fetchAssoc()) {

    // flag to look for questions and answers during elections or not
    $before_election = $row['user_role'] == 'candidate' ? 1 : 0;

    // go for number of questions
    $questionQuery = db_select('node', 'n');
    $questionQuery->addExpression('IFNULL(COUNT(n.nid), 0)', 'count');
    $questionQuery->join('field_data_field_dialogue_recipient', 'r', 'r.entity_type = \'node\' AND r.entity_id = n.nid');
    $questionQuery->join('field_data_field_dialogue_message_type', 'f', 'f.entity_type = \'node\' AND f.entity_id = n.nid');
    $questionQuery->join('field_data_field_dialogue_before_election', 'before_election', 'before_election.entity_type = \'node\' AND before_election.entity_id=n.nid');
    $questionQuery->join('field_revision_field_parliament', 'p', 'p.entity_type = \'node\' AND p.entity_id=n.nid');
    $questionQuery->join('taxonomy_term_data', 'rn', 'rn.tid=p.field_parliament_tid');
    $questionQuery->condition('r.field_dialogue_recipient_target_id', $row['uid']);
    $questionQuery->condition('n.status', 1);
    $questionQuery->condition('rn.name', $row['parliament_name']);
    $questionQuery->condition('before_election.field_dialogue_before_election_value', $before_election);
    $questionResult = $questionQuery->execute()->fetchAssoc();

    // go for number of answers
    $answerQuery = db_select('comment', 'c');
    $answerQuery->addExpression('COUNT(DISTINCT c.nid)', 'count');
    $answerQuery->join('field_data_field_dialogue_message_type', 'f', 'f.entity_type = \'comment\' AND f.entity_id = c.cid');
    $answerQuery->leftJoin('field_data_field_dialogue_is_standard_reply', 'standard_reply', 'standard_reply.entity_type = \'comment\' AND standard_reply.entity_id = c.cid AND standard_reply.field_dialogue_is_standard_reply_value = 0');
    $answerQuery->join('node', 'n', 'n.nid=c.nid');
    $answerQuery->join('field_data_field_dialogue_before_election', 'before_election', 'before_election.entity_type = \'node\' AND before_election.entity_id=n.nid');
    $answerQuery->join('field_revision_field_parliament', 'p', 'p.entity_type = \'node\' AND p.entity_id=n.nid');
    $answerQuery->join('taxonomy_term_data', 'rn', 'rn.tid=p.field_parliament_tid');
    $answerQuery->condition('c.uid', $row['uid']);
    $answerQuery->condition('c.status', 1);
    $answerQuery->condition('rn.name', $row['parliament_name']);
    //$answerQuery->condition('standard_reply.field_dialogue_is_standard_reply_value', 0);
    $answerQuery->condition('before_election.field_dialogue_before_election_value', $before_election);
    $answerResult = $answerQuery->execute()->fetchAssoc();

    // update all tables
    db_update('user_archive_cache')
      ->fields(array(
        'number_of_questions' => $questionResult['count'],
        'number_of_answers' => $answerResult['count']
      ))
      ->condition('uid', $row['uid'])
      ->condition('vid', $row['vid'])
      ->execute();
    db_update('field_revision_field_user_answers_give')
      ->fields(array('field_user_answers_give_value' => $answerResult['count']))
      ->condition('entity_id', $row['uid'])
      ->condition('revision_id', $row['vid'])
      ->execute();
    db_update('field_revision_field_user_questions_get')
      ->fields(array('field_user_questions_get_value' => $questionResult['count']))
      ->condition('entity_id', $row['uid'])
      ->condition('revision_id', $row['vid'])
      ->execute();
  }

  // delete old revisions - buggy
  // pw_delete_old_user_revisions();

  return "Done";
}

/**
 * Creates schema for user archive if necessary, selects and returns users and
 * their revisions that have changed in the last 24 hours.
 *
 * The return query object is build in two steps.
 * 1. Fetch highest and actual vid of every grouped item.
 * 2. Modify query object and re-fetch data using the vids.
 *
 * @return $query SelectQuery
 */
function check_user_archives_database($uid = NULL) {

  $request_timespan = time() - (20000000000 * 60 * 60);

  // db_select: user revision
  $query = db_select('user_revision', 'ur');
  $query->addExpression('MAX(ur.vid)', 'vid');

  // join taxonomy terms to get parliament name
  $query->join('field_revision_field_user_parliament', 'u_parl', "u_parl.entity_type = 'user' AND ur.vid = u_parl.revision_id");
  $query->join('taxonomy_term_data', 'td', 'td.tid = u_parl.field_user_parliament_tid');

  // join fractions to get fraction tid
  $query->leftJoin('field_revision_field_user_fraction', 'fraction_tid', "fraction_tid.entity_type = 'user' AND fraction_tid.revision_id = ur.vid");
  $query->leftJoin('taxonomy_term_data', 'fraction_name', 'fraction_name.tid = fraction_tid.field_user_fraction_tid');

  // join revisionable roles to get user_role
  $query->join('field_revision_field_user_roles_for_view_mode_s', 'role_tid', "role_tid.entity_type = 'user' AND role_tid.revision_id = ur.vid");
  $query->join('taxonomy_term_data', 'role_name', 'role_name.tid = role_tid.field_user_roles_for_view_mode_s_tid');

  // query conditions
  $query->condition('ur.status', '1');
  if ($uid != NULL) {
    $query->condition('ur.uid', $uid);
  }
  $query->condition('ur.timestamp', $request_timespan, '>');
  $query->condition('role_name.name', array('Deputy', 'Candidate'));
  $query->groupBy('ur.uid, u_parl.field_user_parliament_tid, role_tid.field_user_roles_for_view_mode_s_tid, fraction_tid.field_user_fraction_tid');

  // fetch all vids as flat array
  $vids = $query->execute()->fetchCol();

  // return if no revision were found (e.g. non-politician)
  if(empty($vids)){
    return;
  }

  // second step: modify query and get items by vids

  // add fetched vids as condition
  $query->condition('ur.vid', $vids);

  // unset group and max(vid) expression
  array_pop($query->getGroupBy());
  array_pop($query->getExpressions());

  // readd vid as regular field
  $query->addField('ur', 'vid', 'vid');

  // add all the other fields (and joins)
  $query->addField('ur', 'uid');
  $query->addField('ur', 'name', 'user_name');
  $query->addField('td', 'name', 'parliament_name');
  $query->addField('fraction_name', 'name', 'fraction_name');
  $query->addExpression('LOWER(role_name.name)', 'user_role');

  // join parliament election to get timestamp for elections
  $query->join('field_revision_field_parliament_election', 'pe', "pe.entity_type='taxonomy_term' AND pe.entity_id = u_parl.field_user_parliament_tid");
  $query->addExpression('UNIX_TIMESTAMP(pe.field_parliament_election_value)', 'timestamp');

  // join valid to get valid from
  $query->leftJoin('field_revision_field_user_joined', 'user_joined', "user_joined.entity_type = 'user' AND user_joined.revision_id = ur.vid");
  $query->addField('user_joined', 'field_user_joined_value', 'user_joined');

  // join valid to get valid until
  $query->leftJoin('field_revision_field_user_retired', 'user_retired', "user_retired.entity_type = 'user' AND user_retired.revision_id = ur.vid");
  $query->addField('user_retired', 'field_user_retired_value', 'user_retired');

  return $query;
}

/**
 * Deletes old user revisions from database.
 */
function pw_delete_old_user_revisions($uid = NULL) {
  $days_buffer = 0;
  $time_buffer = time() - (86400 * $days_buffer);

  // query for all revision which are older than X days and which are not in the user_archive_cache table
  $query = db_select('user_revision', 'ur');
  $query->addField('ur', 'uid');
  $query->addField('ur', 'vid');
  $query->addField('uac', 'id');
  $query->join('field_revision_field_user_roles_for_view_mode_s', 'ro', 'ro.entity_id=ur.uid AND ro.revision_id=ur.vid');
  $query->join('taxonomy_term_data', 'rn', 'rn.tid=ro.field_user_roles_for_view_mode_s_tid');
  $query->leftJoin('user_archive_cache', 'uac', 'ur.uid = uac.uid AND ur.vid = uac.vid');
  $query->join('users', 'u', 'ur.uid = u.uid AND ur.vid != u.vid');
  if($uid !== NULL) {
    $query->condition('ur.uid', $uid);
  }
  $query->condition('ur.timestamp', $time_buffer, '<');
  $query->condition('rn.name', 'Politician');
  $query->isNull('id');
  $result = $query->execute();
  $number_of_revisions = $result->rowCount();

  // revisions found
  if ($number_of_revisions > 0) {

    // delete all those revisions
    while ($revision = $result->fetchObject()) {
      user_revision_delete($revision);
    }

    // leave a message
    watchdog('pw_userarchives', ':number_of_revisions user revisions deleted which were older than :days_buffer days and were not associated with user_archive_cache', array(
      ':number_of_revisions' => $number_of_revisions,
      ':days_buffer' => $days_buffer
    ));
  }
}

/**
 * Chaecks and resets user revision to actual (newest) profile
 * @param $uid
 */
function pw_reset_actuale_profile($uid) {

  // load current profile
  $user = user_load($uid, TRUE);

  if(!$user){
    return;
  }

  // load newest profile
  $query = db_select('user_archive_cache', 'uac');
  $query->addField('uac', 'vid');
  $query->condition('uac.uid', $uid);
  $query->orderBy('uac.timestamp', 'DESC');
  $query->orderBy('uac.user_role=\'deputy\'', 'DESC');
  $query->orderBy('uac.vid', 'DESC');
  $result = $query->execute()->fetchAssoc();
  $newest_vid = $result['vid'];

  // check if current vid is newest
  if($user->vid != $newest_vid){

    // load full revision
    $user_revision = user_revision_load($uid, $newest_vid);

    // retrieve roles and add them to user object
    $role_tids = _pw_array_flatten($user_revision->field_user_roles_for_view_mode_s, FALSE);
    $roles_terms = taxonomy_term_load_multiple($role_tids);
    $user_revision->roles = [];
    foreach($roles_terms as $role_term){
      $role =  user_role_load_by_name($role_term->name);
      $user_revision->roles[$role->rid] = $role->name;
    }
    $user_revision->revision = 1;

    // add custom abort flag to prevent from circular updates
    $user_revision->abort_update = 1;
    $user_revision->log = t('Copy of the revision from %date.', array('%date' => format_date($user_revision->revision_timestamp)));
    user_save($user_revision, (array) $user_revision);
    watchdog('user', 'reverted %title revision %revision.', array('%title' => $user_revision->name, '%revision' => $user_revision->vid));
  }
}
