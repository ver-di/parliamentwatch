<?php

/**
 * @file
 * Module for the dialogue import.
 */

include_once 'pw_dialogues.features.inc';

/**
 * A buffer of overlap between the imports in seconds.
 */
define('PW_DIALOGUES_INTERVAL', 86400); // one day buffer

/**
 * Implements hook_menu().
 */
function pw_dialogues_menu() {
  $menu['admin/config/pw/dialogues/settings'] = array(
    'title' => 'Dialogue importer',
    'description' => 'Configure the source URL for the dialogue importer.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pw_dialogues_admin_settings_form'),
    'access arguments' => array('import dialogue_importer feeds'),
    'file' => 'pw_dialogues.admin.inc',
  );

  $menu['admin/config/pw/dialogues'] = array(
    'title' => 'Dialogue importer',
    'description' => 'Mass re-import dialogues.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pw_dialogues_admin_reimport'),
    'access arguments' => array('import dialogue_importer feeds'),
    'file' => 'pw_dialogues.admin.inc',
  );

  $menu['api/import/dialogue/%'] = array(
    'title' => 'imports dialogue',
    'access arguments' => array('access content'),
    'page callback' => 'pw_dialogues_triggered_import',
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $menu;
}

/**
 * Implements hook_theme().
 */
function pw_dialogues_theme() {
  return array(
    'comment_placeholder' => array(
      'template' => 'comment-placeholder',
      'render element' => 'elements',
    ),
    'empty_dialogues' => array(
      'template' => 'empty-dialogues',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function pw_dialogues_block_info() {
  $blocks['qa'] = array(
    'info' => t('Questions and answers'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['qa-questions-teasers'] = array(
    'info' => t('Questions Teasers'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['qa-filters-header'] = array(
    'info' => t('Questions and answers filters header'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['qa-filters-search'] = array(
    'info' => t('Questions and answers keyword search'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function pw_dialogues_block_view($delta) {
  switch ($delta) {
    case 'qa':
      return pw_dialogues_questions_and_answers_block();
    case 'qa-questions-teasers':
      return pw_dialogues_questions_teasers_block();
    case 'qa-filters-header':
      return pw_dialogues_questions_and_answers_filters_header_block();
    case 'qa-filters-search':
      return pw_dialogues_questions_and_answers_search_block();
  }
}

/**
 * Implements hook_node_view().
 */
function pw_dialogues_node_view($node, $view_mode) {
  if ($node->type != 'dialogue' || !in_array($view_mode, array('default', 'teaser'))) {
    return;
  }
  $node->content['comments'] = comment_node_page_additions($node);
  if (empty($node->content['comments'])) {
    $node->content['comments'] = array(
      '#theme' => 'comment_wrapper__node_' . $node->type,
      '#node' => $node,
      'comments' => array(
        '#theme' => 'comment_placeholder__node_' . $node->type,
        '#node' => $node,
      ),
    );
  }
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function pw_dialogues_entity_view_mode_alter(&$view_mode, $context) {
  if($context['entity_type'] == "comment" && $context['entity']->nid && $context['entity']->node_type == "comment_node_dialogue" && arg(0) == 'user'){
    $entity_info = entity_get_info('comment');
    if(key_exists('teaser', $entity_info['view modes'])){
      $view_mode = "teaser";
    }
  }
}

/**
 * Menu callback; imports questions.
 */
function pw_dialogues_triggered_import() {
  drupal_add_http_header('Content-type', 'text/plain; charset=utf8');
  $debug_message = array();
  $debug_message['request_uri'] = request_uri();
  $return_value = 'FAILED';
  if (is_numeric(arg(3))) {

    // prepare for import
    $dialogue_id = arg(3);
    $source = variable_get('pw_dialogues_importer_source');
    $source .= $dialogue_id;
    $source .= '?unreleased=1';
    $debug_message['source'] = $source;

    // retrieve what to do (delete, create, ...)
    $doc = new DOMDocument();
    $doc->preserveWhiteSpace = false;
    $doc->load($source);
    $xpath = new DOMXpath($doc);
    $xlist_status = $xpath->query("//message[type='question']/status");
    $xnode_status = $xlist_status->item(0)->nodeValue;

    // do import
    pw_dialogues_do_import_questions($source);

    // check if dialogue was imported
    $efq_nodes = new EntityFieldQuery();
    $efq_nodes->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'dialogue')
      ->fieldCondition('field_dialogue_id', 'value', $dialogue_id);
    $result = $efq_nodes->execute();
    $debug_message['result'] = $result;

    // dialogue found
    if (isset($result['node'])) {
      $dialogue_nid = key($result['node']);
      $node = node_load($dialogue_nid);
      $recipient_id = $node->field_dialogue_recipient['und'][0]['target_id'];

      // delete answers and re-import them
      /* $sql = "SELECT cid FROM {comment} WHERE nid=:nid";
      $cids_to_delete = db_query($sql, array(':nid' => $dialogue_nid))->fetchCol();
      $debug_message['cids_to_delete'] = $cids_to_delete;
      comment_delete_multiple($cids_to_delete);*/
      pw_dialogues_do_import_answers($source);

      // set return_value to OK
      if (is_numeric($recipient_id) && ($user = user_load($recipient_id)) || $node->status != 1) {
        $return_value = 'OK';
        if (function_exists('pw_userarchives_cron')) {
          pw_userarchives_cron($recipient_id);
        }
      }
    }

    // node deleted
    elseif($xnode_status != 1 && !isset($result['node'])){
      $return_value = 'OK';
    }
  }

  _pw_send_debug_mail('Import ' . $return_value . ': ' . request_uri(), $debug_message);
  print $return_value;
}

/**
 * Implements hook_cron().
 * imports all dialugues once at night.
 * Normally all dialogues should be already imported
 * by push request to api/import/dialogue/% via the moderation backend.
 */
function pw_dialogues_cron() {

  // get import base url
  if ($source = variable_get('pw_dialogues_importer_source')) {

    // append the updated_since GET parameter to the source URL.
    if ($last_import = variable_get('pw_dialogues_importer_last_import', 0)) {

      // import only every X days / hours/ etc
      if ($last_import < time() - PW_DIALOGUES_INTERVAL) {

        // import buffer: 1.5 of import interval
        $updated_since_timestamp = $last_import - PW_DIALOGUES_INTERVAL * 1.5;
        $updated_since = date('Y-m-d\\TH:i:s', $updated_since_timestamp);
        if (strpos($source, '?') === FALSE) {
          $source .= '?updated_since=' . $updated_since;
        }
        else {
          $source .= '&updated_since=' . $updated_since;
        }

        // do the import
        pw_dialogues_do_import_questions($source);
        pw_dialogues_do_import_answers($source);

        // trigger userarchive cron which
        if (function_exists('pw_userarchives_cron')) {

          // query which politicians have a changed question and answer count.
          $users = db_query('SELECT DISTINCT f.field_dialogue_recipient_target_id
            FROM {field_data_field_dialogue_recipient} AS f
            INNER JOIN {feeds_item} AS i ON f.entity_type = i.entity_type AND f.entity_id = i.entity_id
            WHERE i.imported >= :imported', array(':imported' => $updated_since_timestamp))->fetchCol();

          // rewrite user archive cache table
          foreach ($users as $uid) {
            pw_userarchives_cron($uid);
          }
        }

        // save last import date
        variable_set('pw_dialogues_importer_last_import', REQUEST_TIME);
      }
    }
  }
}

/**
 * starts feeds import
 */
function pw_dialogues_do_import_questions($source) {

  // Import dialogues (questions).
  $dialogue_feed = feeds_source('dialogue_importer');
  $dialogue_feed->addConfig(array(
    'FeedsHTTPFetcher' => array(
      'source' => $source,
    ),
  ));
  while (FEEDS_BATCH_COMPLETE != $dialogue_feed->import()) {
    ;
  }

  // add watchdog message
  watchdog('dialogue_importer', 'questions imported from ' . $source);

  return TRUE;
}

function pw_dialogues_do_import_answers($source) {

  // Import messages (answers).
  $message_feed = feeds_source('dialogue_message_importer');
  $message_feed->addConfig(array(
    'FeedsHTTPFetcher' => array(
      'source' => $source,
    ),
  ));
  while (FEEDS_BATCH_COMPLETE != $message_feed->import()) {
    ;
  }

  // add watchdog message
  watchdog('dialogue_message_importer', 'answers imported from ' . $source);

  return TRUE;
}

/**
 * modifies data on dialogue save (or import via api).
 *
 */
function pw_dialogues_entity_presave($entity, $type) {

  // Force URL alias for dialogues
  if ($type == 'node' && $entity->type == 'dialogue' && $entity->nid) {
    module_load_include('inc', 'pathauto');
    $entity->path['pathauto'] = TRUE;
    $alias_action = variable_get('pathauto_update_action', 0);
    variable_set('pathauto_update_action', PATHAUTO_UPDATE_ACTION_DELETE);
    $entity->path = pathauto_node_update_alias($entity, 'update');
    variable_set('pathauto_update_action', $alias_action);
  }

}

/**
 *  Implements hook_feeds_presave().
 */
function pw_dialogues_feeds_presave(FeedsSource $source, $entity, $item) {

  if ($source->id == 'dialogue_importer' || $source->id == 'dialogue_message_importer') {

    // delete and skip item instead of importing
    if (!$entity->status) {

      // skip item
      $entity->feeds_item->skip = TRUE;

      // delete dialogue node (question)
      if ($entity->nid && !isset($entity->cid)) {
        entity_delete("node", $entity->nid);
      }

      // delete dialogue comments (answers)
      elseif ($entity->cid) {
        entity_delete("comment", $entity->cid);
      }
    }

    // remove empty attachments
    elseif (isset($entity->field_dialogue_documents['und'][0]['url']) && empty($entity->field_dialogue_documents['und'][0]['url'])) {
      $entity->field_dialogue_documents = NULL;
    }
    else {

      // add title to link
      foreach ($entity->field_dialogue_documents['und'] as &$document) {
        $document['title'] = basename($document['url']);
      }
    }
  }
}

/**
 * Implements template_preprocess_node().
 */
function pw_dialogues_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($node->type == 'dialogue') {
    drupal_add_js('misc/form.js');
    drupal_add_js('misc/collapse.js');
    $variables['classes_array'][] = 'question';
    $variables['submitted'] = format_date($node->created, 'date_only_short');
    //$variables['title'] = t('Question from @name', array('@name' => $node->field_dialogue_sender_name[LANGUAGE_NONE][0]['safe_value']));
    $variables['title_attributes_array']['class'][] = 'bubble';
  }
}

/**
 * Implements template_preprocess_comment().
 */
function pw_dialogues_preprocess_comment(&$variables) {
  $node = $variables['node'];
  if ($node->type == 'dialogue') {
    $recipient_id = $node->field_dialogue_recipient['und'][0]['target_id'];
    $recipient_user = user_load($recipient_id);
    $variables['classes_array'][] = 'answer';
    $variables['permalink'] = url("node/$node->nid", array('absolute' => TRUE));
    if($recipient_user){
      $variables['title'] = t('Answer by @name', array('@name' => _pw_get_fullname($recipient_user)));
    }
    $file = file_load($recipient_user->field_user_picture[LANGUAGE_NONE][0]['fid']);
    if (!$file) {
      $info = field_info_field('field_user_picture');
      $file = file_load($info['settings']['default_image']);
    }
    if($file){
      $file_view = file_view($file, 'pw_portrait_s');
      $variables['picture'] = render($file_view);
    }
  }
}

/**
 * Sets variables for the comment placeholder template.
 *
 * @param array $variables
 */
function pw_dialogues_preprocess_comment_placeholder(&$variables) {
  $variables['node'] = $node = $variables['elements']['#node'];
  $variables['classes_array'] = array('comment', 'answer');
  $variables['title'] = t('No answer yet');
  $variables['permalink'] = url("node/$node->nid", array('absolute' => TRUE));

  $file = file_load(_pw_get_current_user()->field_user_picture[LANGUAGE_NONE][0]['fid']);
  if (!$file) {
    $info = field_info_field('field_user_picture');
    $file = file_load($info['settings']['default_image']);
  }
  $variables['picture'] = render(file_view($file, 'pw_file_portrait_s'));
}

/**
 * Displays the questions and answers section of a profile.
 */
function pw_dialogues_questions_and_answers_block() {
  $block = array();
  $account = _pw_get_current_user();
  $parliament = _pw_get_current_parliament_term();
  $limit = FALSE;

  if (!$account || !$parliament) {
    return;
  }

  $dialogue_nids = pw_dialogues_get_dialogue_nids($parliament, $account, $limit, FALSE);

  // if more than one pager exists, set an its pager id here
  // and in block pager config as #element too
  if($limit){
    pager_default_initialize(sizeof($dialogue_nids), $limit);
  }

  if(!empty($dialogue_nids)) {
    $block['subject'] = '<none>'; #t('Questions to @name', array('@name' => _pw_get_fullname($account)));
    $block['content'] = node_view_multiple(node_load_multiple($dialogue_nids), 'teaser');
    $block['content']['pager'] = array(
      '#theme' => 'pager',
    );
    $block['content']['#attached']['js'][] = drupal_get_path('module', 'pw_dialogues') . '/pw_dialogues.js';
  }
  else{
    $block['content'] = theme('empty_dialogues', array(
      'recipient_name' => $account->name,
      )
    );
  }

  return $block;
}

/**
 * Displays the questions as teasers
 */
function pw_dialogues_questions_teasers_block(){
  $block = array();
  $parliament = _pw_get_current_parliament_term();
  $limit = FALSE;

  $dialogue_nids = pw_dialogues_get_dialogue_nids($parliament, FALSE, $limit, TRUE);

  if(empty($dialogue_nids)){
    return;
  }

  // if more than one pager exists, set an its pager id here
  // and in block pager config as #element too
  if($limit){
    pager_default_initialize(sizeof($dialogue_nids), $limit);
  }

  if(!empty($dialogue_nids)) {
    $block['subject'] = t('Answers');
    $block['content'] = node_view_multiple(node_load_multiple($dialogue_nids), 'teaser_landing');
    $block['content']['pager'] = array(
      '#theme' => 'pager',
    );
    $block['content']['#attached']['js'][] = drupal_get_path('module', 'pw_dialogues') . '/pw_dialogues.js';
  }

  return $block;
}

/**
 * Fetch nids from database
 */
function pw_dialogues_get_dialogue_nids($parliament = FALSE, $account = FALSE, $limit = FALSE, $only_answered = FALSE) {

  if($account){
    $is_candidate = _pw_user_has_role($account, 'Candidate');
  }

  // get dialogue nids by solr or otherwise by database
  $dialogue_nids = array();
  if(module_exists('search_api') && $q = search_api_query('node_index')){
    $q->condition('type', 'dialogue');
    if($account) {
      $q->condition('field_dialogue_recipient', $account->uid);
    }
    if($parliament) {
      $q->condition('field_parliament:name', $parliament->name);
    }
    if(isset($is_candidate)){
      $q->condition('field_dialogue_before_election', $is_candidate);
    }

    if (drupal_get_query_parameters()['keywords']) {
      $f = $q->createFilter('OR');
      $f->condition('body:value', drupal_get_query_parameters()['keywords']);
      $f->condition('comments:field_dialogue_comment_body:value', drupal_get_query_parameters()['keywords']);
      $q->filter($f);
    }

    $q->sort('created', 'DESC');
    if($limit){
      $q->range(pager_find_page(10) * 10, $limit);
    }
    $response = $q->execute();

    if(!empty($response['results'])) {
      $dialogue_nids = array_keys($response['results']);
    }
  }
  else{
    $query = db_select('node', 'n');
    $query->fields('n', array('nid'));
    $query->condition('n.status', 1);
    if($parliament) {
      $query->join('field_data_field_parliament', 'fp', "fp.entity_type = 'node' AND fp.entity_id = n.nid");
      $query->condition('fp.field_parliament_tid', $parliament->tid);
    }
    if($account) {
      $query->join('field_data_field_dialogue_recipient', 'fr', "fr.entity_type = 'node' AND fr.entity_id = n.nid");
      $query->condition('fr.field_dialogue_recipient_target_id', $account->uid);
    }
    if(isset($is_candidate)) {
      $query->join('field_data_field_dialogue_before_election', 'fbe', "fbe.entity_type = 'node' AND fbe.entity_id = n.nid");
      $query->condition('fbe.field_dialogue_before_election_value', $is_candidate);
    }
    if($only_answered){
      $query->join('comment', 'c', "c.nid = n.nid");
      $query->condition('c.status', 1);
      $query->groupBy('c.nid');
      $query->orderBy('c.created', 'DESC');
    }
    else{
      $query->orderBy('n.created', 'DESC');
    }
    if($limit){
      $query->range(pager_find_page(10) * 10, $limit);
    }
    $dialogue_nids = $query->execute()->fetchCol();

    /*
    $q = new EntityFieldQuery();
    $q->entityCondition('entity_type', 'node');
    $q->entityCondition('bundle', 'dialogue');
    $q->propertyCondition('status', NODE_PUBLISHED);
    if($parliament) {
      $q->fieldCondition('field_parliament', 'tid', $parliament->tid);
    }
    if($account) {
      $q->fieldCondition('field_dialogue_recipient', 'target_id', $account->uid);
    }
    if(isset($is_candidate)) {
      $q->fieldCondition('field_dialogue_before_election', 'value', $is_candidate);
    }
    $q->range(pager_find_page(10) * 10, $limit);
    $q->propertyOrderBy('created', 'DESC');
    $result = $q->execute();

    if(isset($result['node'])){
      $dialogue_nids = array_keys($result['node']);
    }
    */
  }
  return $dialogue_nids;
}

/**
 * Displays heading for questions and answers filter section.
 */
function pw_dialogues_questions_and_answers_filters_header_block() {
  $block = array();

  $block['subject'] = t('Filter questions and answers');
  $block['content']['clear'] = array(
    '#theme' => 'html_tag',
    '#tag' => 'a',
    '#value' => t('Remove all filters'),
    '#attributes' => array(
      'href' => url($_GET['q']) . '#pw-block-questions-and-answers',
    ),
  );

  return $block;
}

/**
 * Displays the keywords filter for questions and answers.
 */
function pw_dialogues_questions_and_answers_search_block() {
  $block = array();
  $parameters = drupal_get_query_parameters();

  $form = array(
    '#type' => 'form',
    '#action' => '#pw-block-questions-and-answers',
    '#method' => 'GET',
    '#attributes' => array('class' => array('form-search')),
  );
  $form['keywords'] = array(
    '#type' => 'textfield',
    '#name' => 'keywords',
    '#title' => t('Filter questions and answers by keyword'),
    '#value' => isset($parameters['keywords']) ? $parameters['keywords'] : '',
    '#attributes' => array(
      'placeholder' => t('Enter keyword'),
      'class' => array('form-search-keywords'),
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('search'),
    '#attributes' => array('class' => array('form-search-submit')),
  );

  $block['content']['form'] = $form;

  return $block;
}

/**
 * Provides a human readable base path for all profile pages with dialogue filters.
 */
function pw_dialogues_facetapi_pretty_paths_base_path_provider() {
  $base_path_providers = array(
    'pwcustom' => array(
      'handler' => array(
        'label' => t('PW Custom base path provider'),
        'class' => 'PwDialoguesCustomBasePathProvider',
        'description' => 'Custom version for dialogues on profile pages.',
      ),
    ),
  );
  // Allow other modules to alter the base path provider definitions.
  drupal_alter('facetapi_pretty_paths_base_path_provider', $base_path_providers);
  return $base_path_providers;
}
