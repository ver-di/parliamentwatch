<?php
/**
 * @file
 * Code for the PW Globals feature.
 */

include_once 'pw_globals.features.inc';

/**
 * Implements hook_query_alter().
 */
// function pw_globals_query_alter($query) {
//   if ($query->hasTag('node_export_features')) {
//     $query->condition('type', array('announcement', 'page', 'trustee', 'webform', 'pw_slider'), 'IN');
//   }
// }

/**
 * Implements hook_menu().
 *
 * @return array
 */
function pw_globals_menu() {
  $items = array();
  $items['admin/config/pw'] = array(
    'title' => 'Parliamentwatch',
    'description' => 'Custom settings for Parliamentwatch.',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Custom: Checks if User (Revision) is Premium User
 */
function _pw_is_premium_user($user) {
  $term_premium_user = taxonomy_get_term_by_name('Premium User', 'pw_profile_roles_for_view_mode_switch');
  $tid_premium_user = key($term_premium_user);
  foreach ($user->field_user_roles_for_view_mode_s[LANGUAGE_NONE] as $role) {
    if ($tid_premium_user == $role['tid']) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Custom: Checks if profile is open for questions.
 */
function _pw_is_profile_consultable($user=FALSE) {
  if(!$user){
    $user = _pw_get_current_user();
    if(!$user){
      return FALSE;
    }
  }
  $profile_consultable = &drupal_static(__FUNCTION__.(isset($user->vid)?$user->vid:''));
  if (!isset($profile_consultable)) {
    $profile_consultable = FALSE;
    if(!isset($user->field_user_question_form_closed) || empty($user->field_user_question_form_closed)){

      $parliament = taxonomy_term_load($user->field_user_parliament['und'][0]['tid']);
      if(_pw_is_parliament_active($parliament)){
        if(_pw_user_has_role($user, 'Candidate')){
          if(!$parliament){
            return FALSE;
          }
          $date_election = field_get_items('taxonomy_term', $parliament, 'field_parliament_election');
          if(empty($date_election)){
            return FALSE;
          }
          $timestamp_day_before_election = strtotime($date_election[0]['value']) - 6*60*60;
          if(time() > $timestamp_day_before_election){
            return FALSE;
          }
        }

        // joined and retired date
        $date_joined = field_get_items('user', $user, 'field_user_joined');
        $date_retired = field_get_items('user', $user, 'field_user_retired');
        if(!empty($date_joined[0]['value']) && $date_joined[0]['value'] > date('Y-m-d') || !empty($date_retired[0]['value']) && $date_retired[0]['value'] <= date('Y-m-d 00:00:00')){
          return FALSE;
        }
        $profile_consultable = TRUE;
      }
    }
  }
  return $profile_consultable;
}

/**
 * Custom: Checks if User (Revision) has specific role.
 */
function _pw_user_has_role($user, $role) {
  $term_role = taxonomy_get_term_by_name($role, 'pw_profile_roles_for_view_mode_switch');
  $tid_role = key($term_role);
  if(!empty($user->field_user_roles_for_view_mode_s)){
    foreach ($user->field_user_roles_for_view_mode_s[LANGUAGE_NONE] as $user_role) {
      if ($tid_role == $user_role['tid']) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Custom: Retrieve parliament term depending on currently viewed node or user.
 */
function _pw_get_current_parliament_term() {

  $term_parliament = &drupal_static(__FUNCTION__);
  if (!isset($term_parliament)) {

    // check if current page is a views page
    $menu_item = menu_get_item();
    if($menu_item['page_callback'] == 'views_page'){
      $terms = taxonomy_get_term_by_name(arg(1), 'parliaments');
      if(!empty($terms)){
        $term_parliament = array_shift($terms);
        return $term_parliament;
      }
    }

    switch (arg(0)) {

      // load by archived user profile
      case 'profile':
      case 'user':
        /*$user = user_load_by_name(arg(1));
        $user_id = $user->uid;
        $vid = arg(3);
        $user = user_revision_load($user_id, $vid);
        */
        $user = _pw_get_current_user();
        if (isset($user->field_user_parliament[LANGUAGE_NONE][0]['tid'])) {
          $term_parliament_id = $user->field_user_parliament[LANGUAGE_NONE][0]['tid'];
          $term_parliament = taxonomy_term_load($term_parliament_id);
        }
        break;

      // load by user profile
      /*$user = menu_get_object('user');
      if (isset($user->field_user_parliament[LANGUAGE_NONE][0]['tid'])) {
        $term_parliament_id = $user->field_user_parliament[LANGUAGE_NONE][0]['tid'];
        $term_parliament = taxonomy_term_load($term_parliament_id);
      }
      break;
      */

      // load by node
      case 'node':
        $node = menu_get_object();
        if (isset($node->field_parliament[LANGUAGE_NONE][0]['tid'])) {
          $term_parliament_id = $node->field_parliament[LANGUAGE_NONE][0]['tid'];
          $term_parliament = taxonomy_term_load($term_parliament_id);
        }
        break;

      // load by taxonomy
      case 'taxonomy':
        $taxonomy_term = menu_get_object('taxonomy_term', 2);
        if($taxonomy_term->vocabulary_machine_name == 'parliaments'){
          $term_parliament = $taxonomy_term;
        }
        elseif (isset($taxonomy_term->field_parliament[LANGUAGE_NONE][0]['tid'])) {
          $term_parliament_id = $taxonomy_term->field_parliament[LANGUAGE_NONE][0]['tid'];
          $term_parliament = taxonomy_term_load($term_parliament_id);
        }

        break;
    }
  }

  return $term_parliament;
}

/**
 * Custom: check if parliament is active or not.
 */
function _pw_is_parliament_active($parliament=FALSE) {

  // if parliament was not set, try to retrieve it from current context
  if (!$parliament) {
    $parliament = _pw_get_current_parliament_term();
  }
  // if parliament was given as string, try to load full term
  elseif (is_string($parliament)) {
    $parliament = taxonomy_get_term_by_name($parliament, 'parliaments');
  }

  // something went wrong
  if (!$parliament) {
    return FALSE;
  }

  // run against all dates stored in parliament term
  foreach ($parliament->field_parliament_valid[LANGUAGE_NONE] as $date_parliament_valid) {
    if (_pw_is_between_dates($date_parliament_valid)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Custom: Checks if a timestamp (date) is between start and end date of a date field
 * @param array $date_field
 *   date field with start and end date as value and value2
 * @return boolean
 */
function _pw_is_between_dates($date_field, $timestamp=FALSE){
  if(!$timestamp){
    $timestamp = time();
  }
  $has_no_end_date = $date_field['value'] == $date_field['value2'];
  $is_between_dates = strtotime($date_field['value']) < $timestamp && (strtotime($date_field['value2']) > $timestamp || $has_no_end_date);
  return $is_between_dates;
}

/**
 * Custom: Retrieve user depending on user or archived user is viewed.
 */
function _pw_get_current_user() {
  switch (arg(0)) {
    // load by archived user profile
    case 'profil':

      // Load uid by username and vid
      $query = db_select('user_archive_cache', 'uac');
      $query->addField('uac', 'uid');
      $query->condition('uac.user_name', arg(1));
      $query->condition('uac.vid', arg(3));
      $result = $query->execute()->fetchAssoc();
      $user = user_revision_load($result['uid'], arg(3));
      break;

    // load by user profile
    case 'user':
      $user = user_load(arg(1));
      break;
    default:
      $user = FALSE;
  }
  return $user;
}

/**
 * Custom: Retrieve parliament tag from node by nid.
 */
function _pw_get_parliament_term_tid_by_nid($nid) {

  $selected_node = node_load($nid);
  $node_type = $selected_node->type;

  switch ($node_type) {

    case 'sidejob':
      $tid = $selected_node->field_parliament[LANGUAGE_NONE][0]['tid'];
      return $tid;
      break;

    case 'committee_membership':
      $tid = $selected_node->field_parliament[LANGUAGE_NONE][0]['tid'];
      return $tid;
      break;

    case 'speech':
      $tid = $selected_node->field_parliament[LANGUAGE_NONE][0]['tid'];
      return $tid;
      break;
  }
  return FALSE;
}

/**
 * Custom: Map items of a webform submission to their components..
 */

function _pw_webform_get_keyed_fields($webform_node, $submission) {

  // query db to retrieve webform components
  $sql = "SELECT wf_comp.cid, wf_comp.form_key
  FROM webform_component wf_comp
  WHERE wf_comp.nid = :nid";
  $form_fields = db_query($sql, array(':nid' => $webform_node->nid))->fetchAllAssoc('cid');

  // map ids to relevant components
  $form_values = array();
  foreach ($form_fields as $cid => $component) {

    // set reference to submission
    $form_values[$component->form_key] = &$submission->data[$cid][0];
  }

  // return as keyed array
  return $form_values;
}

/**
 * Custom: Send Debug Mail.
 */
function _pw_send_debug_mail($subject, $body){
  mail('debug@abgeordnetenwatch.de', $subject, print_r($body, true)."\n\n############################\n\n".print_r(debug_backtrace(), 1));
}

/**
 * Custom: Get terms as links primarily for listing tags.
 * @param array $terms
 *   array of terms
 * @param string $separator
 *   separator as string
 * @return string
 *   All terms linked to term page.
 */
function _pw_get_linked_terms($terms, $separator=', '){
  return implode($separator, array_map(function($term) {
    return l($term['taxonomy_term']->name, 'taxonomy/term/' . $term['taxonomy_term']->tid);
  }, $terms));
}


/**
 * Custom: Helper, get fullname form user object.
 * @param object $user
 *   user object
 * @return string
 *   Fullname of user.
 */
function _pw_get_fullname($user){
  if(!empty($user)){
    $title = field_get_items('user', $user, 'field_user_title');
    $first_name = field_get_items('user', $user, 'field_user_fname');
    $last_name = field_get_items('user', $user, 'field_user_lname');
    return trim($title[0]['value'].' '.$first_name[0]['value'].' '.$last_name[0]['value']);
  }
}


/**
 * Custom: Helper to load only actual profiles from user archive cache
 * @param SelectQuery $query
 *   query object by reference
 */
function _pw_uac_add_conditions(&$query, $conditions = array()){
  foreach($query->getTables() as $index => $table){
    if($table['table'] == 'user_archive_cache'){
      $alias_uac = $index;
    }
  }

  // table was not joined or conditions not set
  if(!isset($alias_uac) || empty($conditions) || !is_array($conditions)){
    return FALSE;
  }

  // condition date
  if(array_key_exists('date', $conditions) && !empty($conditions['date'])){
    $or_user_joined = db_or();
    $or_user_joined->condition($alias_uac.'.user_joined', $conditions['date'], '<');
    $or_user_joined->condition($alias_uac.'.user_joined', NULL);
    $query->condition($or_user_joined);
    $or_user_retired = db_or();
    $or_user_retired->condition($alias_uac.'.user_retired', $conditions['date'], '>');
    $or_user_retired->condition($alias_uac.'.user_retired', NULL);
    $query->condition($or_user_retired);
  }

  // condition roles
  if(array_key_exists('roles', $conditions)){
    $query->condition($alias_uac.'.user_role', $conditions['roles']);
  }

  // condition parliament
  if(array_key_exists('parliament', $conditions)){
    $query->condition($alias_uac.'.parliament_name', $conditions['parliament']);
  }

  // condition uid
  if(array_key_exists('uid', $conditions)){
    $query->condition($alias_uac.'.uid', $conditions['uid']);
  }
}


/**
 * for debugging entity metadata wrapper object
 */
function _pw_wrapper_debug($w) {
  $values = array();
  foreach ($w->getPropertyInfo() as $key => $val) {
    $values[$key] = $w->$key->value();
  }
  return $values;
}

/**
 * for debugging db_select query
 * @param object $query
 *   db_select query object
 * @return string
 *   Full SQL Statement.
 */
function _pw_query_debug($query) {
  $querystring = preg_replace('/[\{|\}]/', '', $query->__toString());
  foreach($query->getArguments() as $key=> $item){
    if(!$item) {
      $item = 'NULL';
    }
    $querystring = str_replace($key.')', "'".$item."')",$querystring);
  }
  return $querystring;
}

/**
 * flattens array
 * @param array
 * @param keep_key
 * @return array $array
 */
function _pw_array_flatten($array, $keep_key=TRUE) {
  $return = array();
  foreach ($array as $key => $value) {
    if (is_array($value)){
      $return = array_merge($return, _pw_array_flatten($value, $keep_key));
    }
    elseif($keep_key){
      $return[$key] = $value;
    }
    else{
      $return[] = $value;
    }
  }

  return $return;
}
